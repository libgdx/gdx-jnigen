import com.badlogic.gdx.jnigen.commons.HostDetection
import com.badlogic.gdx.jnigen.commons.Os

plugins {
    id "com.badlogicgames.jnigen.jnigen-gradle"
    id 'net.jsign' version '6.0'
    id("me.champeau.jmh") version "0.7.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    if (HostDetection.os === Os.Windows) {
        implementation "com.badlogicgames.jnigen:jnigen-runtime:3.0.1-SNAPSHOT"
        testImplementation "com.badlogicgames.jnigen:jnigen-runtime-platform:3.0.1-SNAPSHOT:natives-desktop"
        jmhImplementation "com.badlogicgames.jnigen:jnigen-runtime-platform:3.0.1-SNAPSHOT:natives-desktop"
    } else {
        implementation project(path: ":jnigen-runtime")
        testImplementation project(path: ":jnigen-runtime", configuration: "archives")
        jmhImplementation project(path: ":jnigen-runtime", configuration: "archives")
    }

    testImplementation fileTree(dir: file("build/jnigen/libs"), include: '*natives-desktop.jar')
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    jmhImplementation fileTree(dir: file("build/jnigen/libs"), include: '*natives-desktop.jar')

    jmh 'org.openjdk.jmh:jmh-core:1.37'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}


test {
    dependsOn "jnigenSequence", "jnigenPackageAllDesktop"
    useJUnitPlatform()
    outputs.upToDateWhen {false}
}

jmh {
    warmupIterations = 2
    iterations = 2
    fork = 2
    timeUnit.set("us")
}

jnigen {
    sharedLibName = "test-natives"

    all {
        cFlags += ["-std=c11", "-fexceptions"]
        cppFlags += ["-std=c++11", "-fexceptions"]

        headerDirs += ["src/main/resources/"]
        cppIncludes += ["src/main/resources/*.cpp"]
    }

    generator {
        outputPath = file("src/main/java")
        basePackage = "com.badlogic.jnigen.generated"
        fileToParse = "test_data.h"
        options = ["-I" + file("src/main/resources/").absolutePath]
    }

    signing {
        jsignParams = [
                name     : 'My Application',
                url      : 'http://www.example.com',
                keystore : 'keystore.p12',
                alias    : 'test',
                storepass: 'secret',
                tsaurl   : 'http://timestamp.sectigo.com'
        ]
        identity = '-'
    }

    addLinux(x32, ARM)
    addLinux(x64, x86)
    addLinux(x64, ARM)
    addLinux(x64, RISCV)
    addMac(x64, x86)
    addMac(x64, ARM)
    addWindows(x32, x86)
    addWindows(x64, x86)
    //add(Windows, x64, ARM)
    addAndroid() {
        androidApplicationMk += ["APP_STL := c++_shared"]
        linkerFlags += ["-stdlib=libc++"]
    }
    addIOS()
}

tasks.register("jnigenSequence") {
    dependsOn "jnigenBuildHost"
    dependsOn(":jnigen-runtime:jnigenBuildHost")
}


eclipse {
    project {
        name = "gdx-jnigen-generator-test"
    }
}
